apply plugin: 'maven'

static Properties getLocalProperties(Project project){
    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
    properties.load( inputStream )
    return properties
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false// 忽略错误配置
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

task javadoc(type: Javadoc) {
    options.encoding "UTF-8"
    options.charSet 'UTF-8'
}

Properties localProperties = getLocalProperties(project)
def username = localProperties.get("username")
def password = localProperties.get("password")

def artifactId = "${project.ext.artifactId}"
def lib_version = "${project.ext.lib_version}"
def lib_group = "${project.ext.lib_group}"

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://packages.aliyun.com/maven/repository/2057525-release-vGOFA8/') {
                authentication(
                        userName: "$username",
                        password: "$password"
                )
            }
            snapshotRepository(url: 'https://packages.aliyun.com/maven/repository/2057525-snapshot-UNzxBP/') {
                authentication(
                        userName: "$username",
                        password: "$password"
                )
            }
            pom.version = "$lib_version"
            pom.artifactId = "$artifactId"
            pom.groupId = "$lib_group"
        }
    }
}